// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Cpu$Yobml = require("./Cpu.bs.js");
var Gpu$Yobml = require("./Gpu.bs.js");
var Input$Yobml = require("./Input.bs.js");
var Timer$Yobml = require("./Timer.bs.js");
var Utils$Yobml = require("./Utils.bs.js");
var Memory$Yobml = require("./Memory.bs.js");
var CpuExec$Yobml = require("./CpuExec.bs.js");

function make(rom) {
  var gpu = Gpu$Yobml.make(rom);
  var input = Input$Yobml.make(/* () */0);
  var timer = Timer$Yobml.make(/* () */0);
  var memory = Memory$Yobml.make(rom, gpu, input, timer);
  var cpu = Cpu$Yobml.make(memory);
  return /* record */[
          /* cpu */cpu,
          /* gpu */gpu,
          /* memory */memory,
          /* input */input,
          /* timer */timer,
          /* tracing */false
        ];
}

function request_interrupt(cpu, n) {
  var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
  return Memory$Yobml.store(cpu[/* memory */4], 65295, isf | n);
}

function is_interrupt_enabled(cpu, n) {
  var __x = Memory$Yobml.load(cpu[/* memory */4], 65535);
  return Utils$Yobml.is_bit_set(__x, n);
}

function interrupt_vector(n) {
  switch (n) {
    case 0 : 
        return 64;
    case 1 : 
        return 72;
    case 2 : 
        return 80;
    case 3 : 
        return 88;
    default:
      return 96;
  }
}

function interrupt(cpu) {
  cpu[/* halted */5] = false;
  var match = cpu[/* ime */2];
  if (match) {
    var _n = 0;
    while(true) {
      var n = _n;
      var if_val = Memory$Yobml.load(cpu[/* memory */4], 65295);
      if (Utils$Yobml.is_bit_set(if_val, n) && is_interrupt_enabled(cpu, n)) {
        var if_val$1 = Utils$Yobml.clear_bit(if_val, n);
        Memory$Yobml.store(cpu[/* memory */4], 65295, if_val$1);
        Cpu$Yobml.push16(cpu, cpu[/* pc */0]);
        return /* record */[
                /* pc */interrupt_vector(n),
                /* cycle */cpu[/* cycle */1],
                /* ime */false,
                /* registers */cpu[/* registers */3],
                /* memory */cpu[/* memory */4],
                /* halted */cpu[/* halted */5],
                /* serial */cpu[/* serial */6]
              ];
      } else {
        var match$1 = n === 4;
        if (match$1) {
          return cpu;
        } else {
          _n = n + 1 | 0;
          continue ;
        }
      }
    };
  } else {
    return cpu;
  }
}

function run($$console) {
  var _console = $$console;
  var _steps = 0;
  while(true) {
    var steps = _steps;
    var $$console$1 = _console;
    var prev_cy = $$console$1[/* cpu */0][/* cycle */1];
    var match = CpuExec$Yobml.step($$console$1[/* cpu */0], false);
    var cpu = match[0];
    var lcd_on = (Memory$Yobml.load(cpu[/* memory */4], 65344) & 128) > 0;
    var gpu = Gpu$Yobml.step($$console$1[/* gpu */1], cpu[/* cycle */1] - prev_cy | 0, lcd_on, cpu[/* memory */4][/* io */3]);
    if (gpu[/* interrupts */9] > 0) {
      var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf | gpu[/* interrupts */9]);
      gpu[/* interrupts */9] = 0;
    }
    var cpu$1 = interrupt(cpu);
    if (gpu[/* new_frame */10] && lcd_on) {
      gpu[/* new_frame */10] = false;
    }
    var init = cpu$1[/* memory */4];
    var memory_000 = /* rom */init[/* rom */0];
    var memory_001 = /* wram */init[/* wram */1];
    var memory_002 = /* exram */init[/* exram */2];
    var memory_003 = /* io */init[/* io */3];
    var memory_004 = /* hram */init[/* hram */4];
    var memory_006 = /* input */init[/* input */6];
    var memory_007 = /* timer */init[/* timer */7];
    var memory = /* record */[
      memory_000,
      memory_001,
      memory_002,
      memory_003,
      memory_004,
      /* gpu */gpu,
      memory_006,
      memory_007
    ];
    var cpu$2 = /* record */[
      /* pc */cpu$1[/* pc */0],
      /* cycle */cpu$1[/* cycle */1],
      /* ime */cpu$1[/* ime */2],
      /* registers */cpu$1[/* registers */3],
      /* memory */memory,
      /* halted */cpu$1[/* halted */5],
      /* serial */cpu$1[/* serial */6]
    ];
    if (steps < 4000000) {
      _steps = steps + 1 | 0;
      _console = /* record */[
        /* cpu */cpu$2,
        /* gpu */gpu,
        /* memory */memory,
        /* input */$$console$1[/* input */3],
        /* timer */$$console$1[/* timer */4],
        /* tracing */$$console$1[/* tracing */5]
      ];
      continue ;
    } else {
      return CpuExec$Yobml.trace(cpu$2, match[1]);
    }
  };
}

function key_to_button(key) {
  switch (key) {
    case " " : 
        return /* Select */1;
    case "ArrowDown" : 
        return /* Down */6;
    case "ArrowLeft" : 
        return /* Left */4;
    case "ArrowRight" : 
        return /* Right */5;
    case "ArrowUp" : 
        return /* Up */7;
    case "Enter" : 
        return /* Start */0;
    case "x" : 
        return /* A */2;
    case "z" : 
        return /* B */3;
    default:
      return undefined;
  }
}

function key_down($$console, key) {
  var match = key_to_button(key);
  if (match !== undefined) {
    return Input$Yobml.key_down($$console[/* input */3], match);
  } else {
    return /* () */0;
  }
}

function key_up($$console, key) {
  var match = key_to_button(key);
  if (match !== undefined) {
    return Input$Yobml.key_up($$console[/* input */3], match);
  } else {
    return /* () */0;
  }
}

function step($$console) {
  var prev_cy = $$console[/* cpu */0][/* cycle */1];
  var cpu;
  if ($$console[/* cpu */0][/* halted */5]) {
    var init = $$console[/* cpu */0];
    cpu = /* record */[
      /* pc */init[/* pc */0],
      /* cycle */$$console[/* cpu */0][/* cycle */1] + 4 | 0,
      /* ime */init[/* ime */2],
      /* registers */init[/* registers */3],
      /* memory */init[/* memory */4],
      /* halted */init[/* halted */5],
      /* serial */init[/* serial */6]
    ];
  } else {
    cpu = CpuExec$Yobml.step($$console[/* cpu */0], $$console[/* tracing */5])[0];
  }
  var elapsed = cpu[/* cycle */1] - prev_cy | 0;
  var timer_int = Timer$Yobml.tick($$console[/* timer */4], elapsed / 4 | 0);
  if (timer_int) {
    request_interrupt(cpu, 4);
  }
  var lcd_on = (Memory$Yobml.load(cpu[/* memory */4], 65344) & 128) > 0;
  var gpu = Gpu$Yobml.step($$console[/* gpu */1], elapsed, lcd_on, cpu[/* memory */4][/* io */3]);
  if (gpu[/* interrupts */9] > 0) {
    request_interrupt(cpu, gpu[/* interrupts */9]);
    gpu[/* interrupts */9] = 0;
  }
  var cpu$1 = interrupt(cpu);
  var init$1 = cpu$1[/* memory */4];
  var memory_000 = /* rom */init$1[/* rom */0];
  var memory_001 = /* wram */init$1[/* wram */1];
  var memory_002 = /* exram */init$1[/* exram */2];
  var memory_003 = /* io */init$1[/* io */3];
  var memory_004 = /* hram */init$1[/* hram */4];
  var memory_006 = /* input */init$1[/* input */6];
  var memory_007 = /* timer */init$1[/* timer */7];
  var memory = /* record */[
    memory_000,
    memory_001,
    memory_002,
    memory_003,
    memory_004,
    /* gpu */gpu,
    memory_006,
    memory_007
  ];
  var cpu$2 = /* record */[
    /* pc */cpu$1[/* pc */0],
    /* cycle */cpu$1[/* cycle */1],
    /* ime */cpu$1[/* ime */2],
    /* registers */cpu$1[/* registers */3],
    /* memory */memory,
    /* halted */cpu$1[/* halted */5],
    /* serial */cpu$1[/* serial */6]
  ];
  return /* record */[
          /* cpu */cpu$2,
          /* gpu */gpu,
          /* memory */memory,
          /* input */$$console[/* input */3],
          /* timer */$$console[/* timer */4],
          /* tracing */$$console[/* tracing */5]
        ];
}

exports.make = make;
exports.request_interrupt = request_interrupt;
exports.is_interrupt_enabled = is_interrupt_enabled;
exports.interrupt_vector = interrupt_vector;
exports.interrupt = interrupt;
exports.run = run;
exports.key_to_button = key_to_button;
exports.key_down = key_down;
exports.key_up = key_up;
exports.step = step;
/* No side effect */
