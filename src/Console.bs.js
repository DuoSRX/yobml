// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Array = require("bs-platform/lib/js/array.js");
var Cpu$Yobml = require("./Cpu.bs.js");
var Gpu$Yobml = require("./Gpu.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Memory$Yobml = require("./Memory.bs.js");
var CpuExec$Yobml = require("./CpuExec.bs.js");

function make(param) {
  var file = Fs.readFileSync("./roms/tetris.gb", "binary");
  var rom = $$Array.mapi((function (n, param) {
          return Caml_string.get(file, n);
        }), Caml_array.caml_make_vect(file.length, 0));
  var gpu = Gpu$Yobml.make(rom);
  var memory = Memory$Yobml.make(rom, gpu);
  var cpu = Cpu$Yobml.make(memory);
  return /* record */[
          /* cpu */cpu,
          /* gpu */gpu,
          /* memory */memory
        ];
}

function run($$console) {
  var _console = $$console;
  var _steps = 0;
  while(true) {
    var steps = _steps;
    var $$console$1 = _console;
    var prev_cy = $$console$1[/* cpu */0][/* cycle */1];
    var match = CpuExec$Yobml.step($$console$1[/* cpu */0]);
    var cpu = match[0];
    var gpu = Gpu$Yobml.step($$console$1[/* gpu */1], cpu[/* cycle */1] - prev_cy | 0);
    var init = cpu[/* memory */4];
    var memory_000 = /* rom */init[/* rom */0];
    var memory_001 = /* wram */init[/* wram */1];
    var memory_002 = /* exram */init[/* exram */2];
    var memory_003 = /* oam */init[/* oam */3];
    var memory_004 = /* io */init[/* io */4];
    var memory_005 = /* hram */init[/* hram */5];
    var memory = /* record */[
      memory_000,
      memory_001,
      memory_002,
      memory_003,
      memory_004,
      memory_005,
      /* gpu */gpu
    ];
    var cpu$1 = /* record */[
      /* pc */cpu[/* pc */0],
      /* cycle */cpu[/* cycle */1],
      /* ime */cpu[/* ime */2],
      /* registers */cpu[/* registers */3],
      /* memory */memory,
      /* serial */cpu[/* serial */5]
    ];
    if (steps < 200000) {
      _steps = steps + 1 | 0;
      _console = /* record */[
        /* cpu */cpu$1,
        /* gpu */gpu,
        /* memory */memory
      ];
      continue ;
    } else {
      return CpuExec$Yobml.trace(cpu$1, match[1]);
    }
  };
}

exports.make = make;
exports.run = run;
/* fs Not a pure module */
