// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Cpu$Yobml = require("./Cpu.bs.js");
var Gpu$Yobml = require("./Gpu.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Memory$Yobml = require("./Memory.bs.js");
var CpuExec$Yobml = require("./CpuExec.bs.js");

function make(param) {
  var file = Fs.readFileSync("./roms/Dr. Mario (World).gb", "binary");
  var rom = $$Array.mapi((function (n, param) {
          return Caml_string.get(file, n);
        }), Caml_array.caml_make_vect(file.length, 0));
  var gpu = Gpu$Yobml.make(rom);
  var memory = Memory$Yobml.make(rom, gpu);
  var cpu = Cpu$Yobml.make(memory);
  return /* record */[
          /* cpu */cpu,
          /* gpu */gpu,
          /* memory */memory
        ];
}

function interrupt(cpu) {
  if (cpu[/* ime */2]) {
    var ise = Memory$Yobml.load(cpu[/* memory */4], 65535);
    var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
    if (isf === 0) {
      return cpu;
    } else if ((ise & 1) > 0 && (isf & 1) > 0) {
      var sp = Cpu$Yobml.get_register16(cpu, /* SP */4) - 2 | 0;
      Memory$Yobml.store16(cpu[/* memory */4], sp, cpu[/* pc */0]);
      Cpu$Yobml.set_register16(cpu, /* SP */4, sp);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf & 286331152);
      return /* record */[
              /* pc */64,
              /* cycle */cpu[/* cycle */1],
              /* ime */false,
              /* registers */cpu[/* registers */3],
              /* memory */cpu[/* memory */4],
              /* serial */cpu[/* serial */5]
            ];
    } else if ((ise & 2) > 0 && (isf & 2) > 0) {
      var sp$1 = Cpu$Yobml.get_register16(cpu, /* SP */4) - 2 | 0;
      Memory$Yobml.store16(cpu[/* memory */4], sp$1, cpu[/* pc */0]);
      Cpu$Yobml.set_register16(cpu, /* SP */4, sp$1);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf & 286331137);
      return /* record */[
              /* pc */72,
              /* cycle */cpu[/* cycle */1],
              /* ime */false,
              /* registers */cpu[/* registers */3],
              /* memory */cpu[/* memory */4],
              /* serial */cpu[/* serial */5]
            ];
    } else {
      return cpu;
    }
  } else {
    return cpu;
  }
}

function run($$console) {
  var _console = $$console;
  var _steps = 0;
  while(true) {
    var steps = _steps;
    var $$console$1 = _console;
    var prev_cy = $$console$1[/* cpu */0][/* cycle */1];
    var match = CpuExec$Yobml.step($$console$1[/* cpu */0]);
    var cpu = match[0];
    var lcd_on = (Memory$Yobml.load(cpu[/* memory */4], 65344) & 128) > 0;
    var gpu = Gpu$Yobml.step($$console$1[/* gpu */1], cpu[/* cycle */1] - prev_cy | 0, lcd_on);
    if (gpu[/* interrupts */8] > 0) {
      var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf | gpu[/* interrupts */8]);
      gpu[/* interrupts */8] = 0;
    }
    var cpu$1 = interrupt(cpu);
    if (gpu[/* new_frame */9] && lcd_on && steps % 100000 === 0) {
      Curry._1(Printf.printf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* End_of_format */0
                  ]),
                "%s"
              ]), "!c");
      $$Array.iter((function (row) {
              $$Array.iter((function (px) {
                      var tmp;
                      switch (px) {
                        case 0 : 
                            tmp = " ";
                            break;
                        case 1 : 
                            tmp = ".";
                            break;
                        case 2 : 
                            tmp = "=";
                            break;
                        case 3 : 
                            tmp = "@";
                            break;
                        default:
                          tmp = "?";
                      }
                      return Curry._1(Printf.printf(/* Format */[
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ]),
                                      "%s"
                                    ]), tmp);
                    }), row);
              return Printf.printf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ]),
                          "\n"
                        ]);
            }), $$console$1[/* gpu */1][/* frame */5]);
      gpu[/* new_frame */9] = false;
    }
    var init = cpu$1[/* memory */4];
    var memory_000 = /* rom */init[/* rom */0];
    var memory_001 = /* wram */init[/* wram */1];
    var memory_002 = /* exram */init[/* exram */2];
    var memory_003 = /* oam */init[/* oam */3];
    var memory_004 = /* io */init[/* io */4];
    var memory_005 = /* hram */init[/* hram */5];
    var memory = /* record */[
      memory_000,
      memory_001,
      memory_002,
      memory_003,
      memory_004,
      memory_005,
      /* gpu */gpu
    ];
    var cpu$2 = /* record */[
      /* pc */cpu$1[/* pc */0],
      /* cycle */cpu$1[/* cycle */1],
      /* ime */cpu$1[/* ime */2],
      /* registers */cpu$1[/* registers */3],
      /* memory */memory,
      /* serial */cpu$1[/* serial */5]
    ];
    if (steps < 1000000000) {
      _steps = steps + 1 | 0;
      _console = /* record */[
        /* cpu */cpu$2,
        /* gpu */gpu,
        /* memory */memory
      ];
      continue ;
    } else {
      return CpuExec$Yobml.trace(cpu$2, match[1]);
    }
  };
}

exports.make = make;
exports.interrupt = interrupt;
exports.run = run;
/* fs Not a pure module */
