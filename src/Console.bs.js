// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Cpu$Yobml = require("./Cpu.bs.js");
var Gpu$Yobml = require("./Gpu.bs.js");
var Input$Yobml = require("./Input.bs.js");
var Memory$Yobml = require("./Memory.bs.js");
var CpuExec$Yobml = require("./CpuExec.bs.js");

function make(rom) {
  var gpu = Gpu$Yobml.make(rom);
  var input = Input$Yobml.make(/* () */0);
  var memory = Memory$Yobml.make(rom, gpu, input);
  var cpu = Cpu$Yobml.make(memory);
  return /* record */[
          /* cpu */cpu,
          /* gpu */gpu,
          /* memory */memory,
          /* input */input
        ];
}

function interrupt(cpu) {
  cpu[/* halted */5] = false;
  if (cpu[/* ime */2]) {
    var ise = Memory$Yobml.load(cpu[/* memory */4], 65535);
    var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
    if (isf === 0) {
      return cpu;
    } else if ((ise & 1) > 0 && (isf & 1) > 0) {
      var sp = Cpu$Yobml.get_register16(cpu, /* SP */4) - 2 | 0;
      Memory$Yobml.store16(cpu[/* memory */4], sp, cpu[/* pc */0]);
      Cpu$Yobml.set_register16(cpu, /* SP */4, sp);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf & 286331152);
      return /* record */[
              /* pc */64,
              /* cycle */cpu[/* cycle */1],
              /* ime */false,
              /* registers */cpu[/* registers */3],
              /* memory */cpu[/* memory */4],
              /* halted */cpu[/* halted */5],
              /* serial */cpu[/* serial */6]
            ];
    } else if ((ise & 2) > 0 && (isf & 2) > 0) {
      var sp$1 = Cpu$Yobml.get_register16(cpu, /* SP */4) - 2 | 0;
      Memory$Yobml.store16(cpu[/* memory */4], sp$1, cpu[/* pc */0]);
      Cpu$Yobml.set_register16(cpu, /* SP */4, sp$1);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf & 286331137);
      return /* record */[
              /* pc */72,
              /* cycle */cpu[/* cycle */1],
              /* ime */false,
              /* registers */cpu[/* registers */3],
              /* memory */cpu[/* memory */4],
              /* halted */cpu[/* halted */5],
              /* serial */cpu[/* serial */6]
            ];
    } else {
      return cpu;
    }
  } else {
    return cpu;
  }
}

function run($$console) {
  var _console = $$console;
  var _steps = 0;
  while(true) {
    var steps = _steps;
    var $$console$1 = _console;
    var prev_cy = $$console$1[/* cpu */0][/* cycle */1];
    var match = CpuExec$Yobml.step($$console$1[/* cpu */0]);
    var cpu = match[0];
    var lcd_on = (Memory$Yobml.load(cpu[/* memory */4], 65344) & 128) > 0;
    var gpu = Gpu$Yobml.step($$console$1[/* gpu */1], cpu[/* cycle */1] - prev_cy | 0, lcd_on, cpu[/* memory */4][/* io */3]);
    if (gpu[/* interrupts */9] > 0) {
      var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
      Memory$Yobml.store(cpu[/* memory */4], 65295, isf | gpu[/* interrupts */9]);
      gpu[/* interrupts */9] = 0;
    }
    var cpu$1 = interrupt(cpu);
    if (gpu[/* new_frame */10] && lcd_on) {
      gpu[/* new_frame */10] = false;
    }
    var init = cpu$1[/* memory */4];
    var memory_000 = /* rom */init[/* rom */0];
    var memory_001 = /* wram */init[/* wram */1];
    var memory_002 = /* exram */init[/* exram */2];
    var memory_003 = /* io */init[/* io */3];
    var memory_004 = /* hram */init[/* hram */4];
    var memory_006 = /* input */init[/* input */6];
    var memory = /* record */[
      memory_000,
      memory_001,
      memory_002,
      memory_003,
      memory_004,
      /* gpu */gpu,
      memory_006
    ];
    var cpu$2 = /* record */[
      /* pc */cpu$1[/* pc */0],
      /* cycle */cpu$1[/* cycle */1],
      /* ime */cpu$1[/* ime */2],
      /* registers */cpu$1[/* registers */3],
      /* memory */memory,
      /* halted */cpu$1[/* halted */5],
      /* serial */cpu$1[/* serial */6]
    ];
    if (steps < 4000000) {
      _steps = steps + 1 | 0;
      _console = /* record */[
        /* cpu */cpu$2,
        /* gpu */gpu,
        /* memory */memory,
        /* input */$$console$1[/* input */3]
      ];
      continue ;
    } else {
      return CpuExec$Yobml.trace(cpu$2, match[1]);
    }
  };
}

function key_to_button(key) {
  switch (key) {
    case " " : 
        return /* Select */1;
    case "ArrowDown" : 
        return /* Down */6;
    case "ArrowLeft" : 
        return /* Left */4;
    case "ArrowRight" : 
        return /* Right */5;
    case "ArrowUp" : 
        return /* Up */7;
    case "Enter" : 
        return /* Start */0;
    case "x" : 
        return /* A */2;
    case "z" : 
        return /* B */3;
    default:
      return undefined;
  }
}

function key_down($$console, key) {
  var match = key_to_button(key);
  if (match !== undefined) {
    return Input$Yobml.key_down($$console[/* input */3], match);
  } else {
    return /* () */0;
  }
}

function key_up($$console, key) {
  var match = key_to_button(key);
  if (match !== undefined) {
    return Input$Yobml.key_up($$console[/* input */3], match);
  } else {
    return /* () */0;
  }
}

function step($$console) {
  var prev_cy = $$console[/* cpu */0][/* cycle */1];
  var cpu;
  if ($$console[/* cpu */0][/* halted */5]) {
    var init = $$console[/* cpu */0];
    cpu = /* record */[
      /* pc */init[/* pc */0],
      /* cycle */$$console[/* cpu */0][/* cycle */1] + 4 | 0,
      /* ime */init[/* ime */2],
      /* registers */init[/* registers */3],
      /* memory */init[/* memory */4],
      /* halted */init[/* halted */5],
      /* serial */init[/* serial */6]
    ];
  } else {
    cpu = CpuExec$Yobml.step($$console[/* cpu */0])[0];
  }
  var lcd_on = (Memory$Yobml.load(cpu[/* memory */4], 65344) & 128) > 0;
  var gpu = Gpu$Yobml.step($$console[/* gpu */1], cpu[/* cycle */1] - prev_cy | 0, lcd_on, cpu[/* memory */4][/* io */3]);
  if (gpu[/* interrupts */9] > 0) {
    var isf = Memory$Yobml.load(cpu[/* memory */4], 65295);
    Memory$Yobml.store(cpu[/* memory */4], 65295, isf | gpu[/* interrupts */9]);
    gpu[/* interrupts */9] = 0;
  }
  var cpu$1 = interrupt(cpu);
  var init$1 = cpu$1[/* memory */4];
  var memory_000 = /* rom */init$1[/* rom */0];
  var memory_001 = /* wram */init$1[/* wram */1];
  var memory_002 = /* exram */init$1[/* exram */2];
  var memory_003 = /* io */init$1[/* io */3];
  var memory_004 = /* hram */init$1[/* hram */4];
  var memory_006 = /* input */init$1[/* input */6];
  var memory = /* record */[
    memory_000,
    memory_001,
    memory_002,
    memory_003,
    memory_004,
    /* gpu */gpu,
    memory_006
  ];
  var cpu$2 = /* record */[
    /* pc */cpu$1[/* pc */0],
    /* cycle */cpu$1[/* cycle */1],
    /* ime */cpu$1[/* ime */2],
    /* registers */cpu$1[/* registers */3],
    /* memory */memory,
    /* halted */cpu$1[/* halted */5],
    /* serial */cpu$1[/* serial */6]
  ];
  return /* record */[
          /* cpu */cpu$2,
          /* gpu */gpu,
          /* memory */memory,
          /* input */$$console[/* input */3]
        ];
}

exports.make = make;
exports.interrupt = interrupt;
exports.run = run;
exports.key_to_button = key_to_button;
exports.key_down = key_down;
exports.key_up = key_up;
exports.step = step;
/* No side effect */
