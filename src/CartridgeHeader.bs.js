// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function mapper_to_string(c) {
  var match = c[/* cartridge_type */0];
  switch (match) {
    case 0 : 
        return "ROM Only";
    case 1 : 
        return "MBC1";
    case 2 : 
        return "MBC3";
    
  }
}

function get_cartridge_type(n) {
  if (n > 3 || n < 0) {
    if (n > 19 || n < 15) {
      return Pervasives.failwith("Unknown cartridge type");
    } else {
      return /* MBC3 */2;
    }
  } else if (n !== 0) {
    return /* MBC1 */1;
  } else {
    return /* RomOnly */0;
  }
}

function get_rom_size(n) {
  return (32768 << n);
}

function get_ram_size(n) {
  switch (n) {
    case 0 : 
        return 0;
    case 1 : 
        return 2048;
    case 2 : 
        return 8192;
    case 3 : 
        return 32768;
    default:
      return Pervasives.failwith("Unhandled ram size");
  }
}

function make(rom) {
  return /* record */[
          /* cartridge_type */get_cartridge_type(Caml_array.caml_array_get(rom, 327)),
          /* rom_size */(32768 << Caml_array.caml_array_get(rom, 328)),
          /* ram_size */get_ram_size(Caml_array.caml_array_get(rom, 329))
        ];
}

exports.mapper_to_string = mapper_to_string;
exports.get_cartridge_type = get_cartridge_type;
exports.get_rom_size = get_rom_size;
exports.get_ram_size = get_ram_size;
exports.make = make;
/* No side effect */
