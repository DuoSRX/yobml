// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Registers$Yobml = require("./Registers.bs.js");

var regs = /* array */[
  /* B */1,
  /* C */2,
  /* D */3,
  /* E */4,
  /* H */6,
  /* L */7,
  /* F */5,
  /* A */0
];

var OpcodeNotImplemented = Caml_exceptions.create("Instructions-Yobml.OpcodeNotImplemented");

var CBOpcodeNotImplemented = Caml_exceptions.create("Instructions-Yobml.CBOpcodeNotImplemented");

function decode(opcode) {
  var exit = 0;
  switch (opcode) {
    case 0 : 
        return /* Nop */34;
    case 1 : 
        return /* Ld_nn */Block.__(19, [/* BC */1]);
    case 2 : 
        return /* Ld_r16_a */Block.__(13, [/* BC */1]);
    case 3 : 
        return /* Inc16 */Block.__(10, [/* BC */1]);
    case 4 : 
        return /* Inc */Block.__(9, [/* B */1]);
    case 5 : 
        return /* Dec */Block.__(7, [/* B */1]);
    case 6 : 
        return /* Ld_n */Block.__(18, [/* B */1]);
    case 7 : 
        return /* Rlca */38;
    case 8 : 
        return /* Ld_a16_sp */27;
    case 9 : 
        return /* Add_hl_r16 */Block.__(2, [/* BC */1]);
    case 10 : 
        return /* Ld_a_r16 */Block.__(17, [/* BC */1]);
    case 11 : 
        return /* Dec16 */Block.__(8, [/* BC */1]);
    case 12 : 
        return /* Inc */Block.__(9, [/* C */2]);
    case 13 : 
        return /* Dec */Block.__(7, [/* C */2]);
    case 14 : 
        return /* Ld_n */Block.__(18, [/* C */2]);
    case 17 : 
        return /* Ld_nn */Block.__(19, [/* DE */2]);
    case 18 : 
        return /* Ld_r16_a */Block.__(13, [/* DE */2]);
    case 19 : 
        return /* Inc16 */Block.__(10, [/* DE */2]);
    case 20 : 
        return /* Inc */Block.__(9, [/* D */3]);
    case 22 : 
        return /* Ld_n */Block.__(18, [/* D */3]);
    case 24 : 
        return /* Jr_e8 */17;
    case 25 : 
        return /* Add_hl_r16 */Block.__(2, [/* DE */2]);
    case 26 : 
        return /* Ld_a_r16 */Block.__(17, [/* DE */2]);
    case 27 : 
        return /* Dec16 */Block.__(8, [/* DE */2]);
    case 28 : 
        return /* Inc */Block.__(9, [/* E */4]);
    case 29 : 
        return /* Dec */Block.__(7, [/* E */4]);
    case 30 : 
        return /* Ld_n */Block.__(18, [/* E */4]);
    case 31 : 
        return /* Rra */39;
    case 32 : 
        return /* Jr */Block.__(12, [
                  /* Z */0,
                  false
                ]);
    case 33 : 
        return /* Ld_nn */Block.__(19, [/* HL */3]);
    case 34 : 
        return /* Ldi_hl_a */25;
    case 35 : 
        return /* Inc16 */Block.__(10, [/* HL */3]);
    case 36 : 
        return /* Inc */Block.__(9, [/* H */6]);
    case 37 : 
        return /* Dec */Block.__(7, [/* H */6]);
    case 38 : 
        return /* Ld_n */Block.__(18, [/* H */6]);
    case 39 : 
        return /* Daa */9;
    case 40 : 
        return /* Jr */Block.__(12, [
                  /* Z */0,
                  true
                ]);
    case 41 : 
        return /* Add_hl_r16 */Block.__(2, [/* HL */3]);
    case 42 : 
        return /* Ldi_a_hl */24;
    case 43 : 
        return /* Dec16 */Block.__(8, [/* HL */3]);
    case 44 : 
        return /* Inc */Block.__(9, [/* L */7]);
    case 45 : 
        return /* Dec */Block.__(7, [/* L */7]);
    case 46 : 
        return /* Ld_n */Block.__(18, [/* L */7]);
    case 47 : 
        return /* Cpl */8;
    case 48 : 
        return /* Jr */Block.__(12, [
                  /* C */3,
                  false
                ]);
    case 49 : 
        return /* Ld_sp */18;
    case 50 : 
        return /* Ldd_hl_a */23;
    case 51 : 
        return /* Inc16 */Block.__(10, [/* SP */4]);
    case 52 : 
        return /* Inc_hl */14;
    case 53 : 
        return /* Dec_hl */10;
    case 54 : 
        return /* Ld_hl_d8 */30;
    case 55 : 
        return /* Scf */41;
    case 56 : 
        return /* Jr */Block.__(12, [
                  /* C */3,
                  true
                ]);
    case 57 : 
        return /* Add_hl_r16 */Block.__(2, [/* SP */4]);
    case 59 : 
        return /* Dec16 */Block.__(8, [/* SP */4]);
    case 60 : 
        return /* Inc */Block.__(9, [/* A */0]);
    case 61 : 
        return /* Dec */Block.__(7, [/* A */0]);
    case 62 : 
        return /* Ld_n */Block.__(18, [/* A */0]);
    case 63 : 
        return /* Ccf */6;
    case 70 : 
        return /* Ld_r_hl */Block.__(16, [/* B */1]);
    case 78 : 
        return /* Ld_r_hl */Block.__(16, [/* C */2]);
    case 86 : 
        return /* Ld_r_hl */Block.__(16, [/* D */3]);
    case 94 : 
        return /* Ld_r_hl */Block.__(16, [/* E */4]);
    case 102 : 
        return /* Ld_r_hl */Block.__(16, [/* H */6]);
    case 110 : 
        return /* Ld_r_hl */Block.__(16, [/* L */7]);
    case 112 : 
        return /* Ld_hl_r */Block.__(15, [/* B */1]);
    case 113 : 
        return /* Ld_hl_r */Block.__(15, [/* C */2]);
    case 114 : 
        return /* Ld_hl_r */Block.__(15, [/* D */3]);
    case 115 : 
        return /* Ld_hl_r */Block.__(15, [/* E */4]);
    case 116 : 
        return /* Ld_hl_r */Block.__(15, [/* H */6]);
    case 117 : 
        return /* Ld_hl_r */Block.__(15, [/* L */7]);
    case 118 : 
        return /* Halt */13;
    case 119 : 
        return /* Ld_hl_r */Block.__(15, [/* A */0]);
    case 126 : 
        return /* Ld_r_hl */Block.__(16, [/* A */0]);
    case 64 : 
    case 65 : 
    case 66 : 
    case 67 : 
    case 68 : 
    case 69 : 
    case 71 : 
    case 72 : 
    case 73 : 
    case 74 : 
    case 75 : 
    case 76 : 
    case 77 : 
    case 79 : 
    case 80 : 
    case 81 : 
    case 82 : 
    case 83 : 
    case 84 : 
    case 85 : 
    case 87 : 
    case 88 : 
    case 89 : 
    case 90 : 
    case 91 : 
    case 92 : 
    case 93 : 
    case 95 : 
    case 96 : 
    case 97 : 
    case 98 : 
    case 99 : 
    case 100 : 
    case 101 : 
    case 103 : 
    case 104 : 
    case 105 : 
    case 106 : 
    case 107 : 
    case 108 : 
    case 109 : 
    case 111 : 
    case 120 : 
    case 121 : 
    case 122 : 
    case 123 : 
    case 124 : 
    case 125 : 
    case 127 : 
        exit = 2;
        break;
    case 128 : 
        return /* Add */Block.__(1, [/* B */1]);
    case 129 : 
        return /* Add */Block.__(1, [/* C */2]);
    case 130 : 
        return /* Add */Block.__(1, [/* D */3]);
    case 131 : 
        return /* Add */Block.__(1, [/* E */4]);
    case 132 : 
        return /* Add */Block.__(1, [/* H */6]);
    case 133 : 
        return /* Add */Block.__(1, [/* L */7]);
    case 135 : 
        return /* Add */Block.__(1, [/* A */0]);
    case 136 : 
        return /* Adc */Block.__(0, [/* B */1]);
    case 137 : 
        return /* Adc */Block.__(0, [/* C */2]);
    case 138 : 
        return /* Adc */Block.__(0, [/* D */3]);
    case 139 : 
        return /* Adc */Block.__(0, [/* E */4]);
    case 140 : 
        return /* Adc */Block.__(0, [/* H */6]);
    case 141 : 
        return /* Adc */Block.__(0, [/* L */7]);
    case 143 : 
        return /* Adc */Block.__(0, [/* A */0]);
    case 144 : 
        return /* Sub */Block.__(31, [/* B */1]);
    case 145 : 
        return /* Sub */Block.__(31, [/* C */2]);
    case 146 : 
        return /* Sub */Block.__(31, [/* D */3]);
    case 147 : 
        return /* Sub */Block.__(31, [/* E */4]);
    case 148 : 
        return /* Sub */Block.__(31, [/* H */6]);
    case 149 : 
        return /* Sub */Block.__(31, [/* L */7]);
    case 151 : 
        return /* Sub */Block.__(31, [/* A */0]);
    case 152 : 
        return /* Sbc */Block.__(28, [/* B */1]);
    case 153 : 
        return /* Sbc */Block.__(28, [/* C */2]);
    case 154 : 
        return /* Sbc */Block.__(28, [/* D */3]);
    case 155 : 
        return /* Sbc */Block.__(28, [/* E */4]);
    case 156 : 
        return /* Sbc */Block.__(28, [/* H */6]);
    case 157 : 
        return /* Sbc */Block.__(28, [/* L */7]);
    case 159 : 
        return /* Sbc */Block.__(28, [/* A */0]);
    case 160 : 
        return /* And */Block.__(3, [/* B */1]);
    case 161 : 
        return /* And */Block.__(3, [/* C */2]);
    case 162 : 
        return /* And */Block.__(3, [/* D */3]);
    case 163 : 
        return /* And */Block.__(3, [/* E */4]);
    case 164 : 
        return /* And */Block.__(3, [/* H */6]);
    case 165 : 
        return /* And */Block.__(3, [/* L */7]);
    case 167 : 
        return /* And */Block.__(3, [/* A */0]);
    case 168 : 
        return /* Xor */Block.__(33, [/* B */1]);
    case 169 : 
        return /* Xor */Block.__(33, [/* C */2]);
    case 170 : 
        return /* Xor */Block.__(33, [/* D */3]);
    case 171 : 
        return /* Xor */Block.__(33, [/* E */4]);
    case 172 : 
        return /* Xor */Block.__(33, [/* H */6]);
    case 173 : 
        return /* Xor */Block.__(33, [/* L */7]);
    case 174 : 
        return /* Xor_hl */46;
    case 175 : 
        return /* Xor */Block.__(33, [/* A */0]);
    case 176 : 
        return /* Or */Block.__(20, [/* B */1]);
    case 177 : 
        return /* Or */Block.__(20, [/* C */2]);
    case 178 : 
        return /* Or */Block.__(20, [/* D */3]);
    case 179 : 
        return /* Or */Block.__(20, [/* E */4]);
    case 180 : 
        return /* Or */Block.__(20, [/* H */6]);
    case 181 : 
        return /* Or */Block.__(20, [/* L */7]);
    case 182 : 
        return /* Or_hl */33;
    case 183 : 
        return /* Or */Block.__(20, [/* A */0]);
    case 184 : 
        return /* Cp */Block.__(6, [/* B */1]);
    case 185 : 
        return /* Cp */Block.__(6, [/* C */2]);
    case 186 : 
        return /* Cp */Block.__(6, [/* D */3]);
    case 187 : 
        return /* Cp */Block.__(6, [/* E */4]);
    case 188 : 
        return /* Cp */Block.__(6, [/* H */6]);
    case 189 : 
        return /* Cp */Block.__(6, [/* L */7]);
    case 191 : 
        return /* Cp */Block.__(6, [/* A */0]);
    case 192 : 
        return /* RetCond */Block.__(25, [
                  /* Z */0,
                  false
                ]);
    case 193 : 
        return /* Pop16 */Block.__(21, [/* BC */1]);
    case 194 : 
        return /* JpCond */Block.__(11, [
                  /* Z */0,
                  false
                ]);
    case 195 : 
        return /* Jp */15;
    case 196 : 
        return /* CallCond */Block.__(5, [
                  /* Z */0,
                  false
                ]);
    case 197 : 
        return /* Push16 */Block.__(22, [/* BC */1]);
    case 198 : 
        return /* Add_d8 */1;
    case 199 : 
        return /* Rst */Block.__(27, [0]);
    case 200 : 
        return /* RetCond */Block.__(25, [
                  /* Z */0,
                  true
                ]);
    case 201 : 
        return /* Ret */36;
    case 202 : 
        return /* JpCond */Block.__(11, [
                  /* Z */0,
                  true
                ]);
    case 204 : 
        return /* CallCond */Block.__(5, [
                  /* Z */0,
                  true
                ]);
    case 205 : 
        return /* Call */5;
    case 206 : 
        return /* Adc_d8 */0;
    case 207 : 
        return /* Rst */Block.__(27, [8]);
    case 208 : 
        return /* RetCond */Block.__(25, [
                  /* C */3,
                  false
                ]);
    case 209 : 
        return /* Pop16 */Block.__(21, [/* DE */2]);
    case 210 : 
        return /* JpCond */Block.__(11, [
                  /* C */3,
                  false
                ]);
    case 212 : 
        return /* CallCond */Block.__(5, [
                  /* C */3,
                  false
                ]);
    case 213 : 
        return /* Push16 */Block.__(22, [/* DE */2]);
    case 214 : 
        return /* Sub_d8 */43;
    case 215 : 
        return /* Rst */Block.__(27, [16]);
    case 216 : 
        return /* RetCond */Block.__(25, [
                  /* C */3,
                  true
                ]);
    case 217 : 
        return /* Reti */37;
    case 218 : 
        return /* JpCond */Block.__(11, [
                  /* C */3,
                  true
                ]);
    case 220 : 
        return /* CallCond */Block.__(5, [
                  /* C */3,
                  true
                ]);
    case 222 : 
        return /* Sbc_d8 */40;
    case 223 : 
        return /* Rst */Block.__(27, [24]);
    case 224 : 
        return /* Ld_write_io_n */20;
    case 225 : 
        return /* Pop16 */Block.__(21, [/* HL */3]);
    case 226 : 
        return /* Ld_write_io_c */22;
    case 229 : 
        return /* Push16 */Block.__(22, [/* HL */3]);
    case 230 : 
        return /* And_d8 */3;
    case 231 : 
        return /* Rst */Block.__(27, [32]);
    case 232 : 
        return /* Add_sp_e8 */2;
    case 233 : 
        return /* Jp_hl */16;
    case 234 : 
        return /* Ld_a16_a */26;
    case 238 : 
        return /* Xor_d8 */45;
    case 239 : 
        return /* Rst */Block.__(27, [40]);
    case 240 : 
        return /* Ld_read_io_n */19;
    case 241 : 
        return /* Pop_af */35;
    case 242 : 
        return /* Ld_read_io_c */21;
    case 243 : 
        return /* Di */11;
    case 245 : 
        return /* Push16 */Block.__(22, [/* AF */0]);
    case 246 : 
        return /* Or_d8 */32;
    case 247 : 
        return /* Rst */Block.__(27, [48]);
    case 248 : 
        return /* Ld_hl_sp_e8 */31;
    case 249 : 
        return /* Ld_sp_hl */28;
    case 250 : 
        return /* Ld_a_a16 */29;
    case 251 : 
        return /* Ei */12;
    case 15 : 
    case 16 : 
    case 21 : 
    case 23 : 
    case 58 : 
    case 134 : 
    case 142 : 
    case 150 : 
    case 158 : 
    case 166 : 
    case 190 : 
    case 203 : 
    case 211 : 
    case 219 : 
    case 221 : 
    case 227 : 
    case 228 : 
    case 235 : 
    case 236 : 
    case 237 : 
    case 244 : 
    case 252 : 
    case 253 : 
        exit = 1;
        break;
    case 254 : 
        return /* Cp_n */7;
    case 255 : 
        return /* Rst */Block.__(27, [56]);
    default:
      exit = 1;
  }
  switch (exit) {
    case 1 : 
        throw [
              OpcodeNotImplemented,
              Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "0x",
                            /* Int */Block.__(4, [
                                /* Int_X */8,
                                /* Lit_padding */Block.__(0, [
                                    /* Zeros */2,
                                    2
                                  ]),
                                /* No_precision */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "0x%02X"
                      ]), opcode)
            ];
    case 2 : 
        var dst = Caml_array.caml_array_get(regs, (opcode >>> 3) & 7);
        var src = Caml_array.caml_array_get(regs, opcode & 7);
        return /* Ld_rr */Block.__(14, [
                  dst,
                  src
                ]);
    
  }
}

function decode_cb(opcode) {
  var exit = 0;
  if (opcode >= 158) {
    if (opcode < 175) {
      var switcher = opcode - 159 | 0;
      if (switcher > 14 || switcher < 0) {
        if (switcher >= 15) {
          return /* Res_hl */Block.__(24, [5]);
        } else {
          return /* Res_hl */Block.__(24, [3]);
        }
      } else if (switcher !== 7) {
        exit = 1;
      } else {
        return /* Res_hl */Block.__(24, [4]);
      }
    } else if (opcode !== 182) {
      if (opcode !== 190) {
        exit = 1;
      } else {
        return /* Res_hl */Block.__(24, [7]);
      }
    } else {
      return /* Res_hl */Block.__(24, [6]);
    }
  } else if (opcode >= 135) {
    if (opcode !== 142) {
      if (opcode !== 150) {
        exit = 1;
      } else {
        return /* Res_hl */Block.__(24, [2]);
      }
    } else {
      return /* Res_hl */Block.__(24, [1]);
    }
  } else if (opcode >= 64) {
    if (opcode >= 134) {
      return /* Res_hl */Block.__(24, [0]);
    } else {
      exit = 1;
    }
  } else if (opcode >= 24) {
    switch (opcode - 24 | 0) {
      case 0 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* B */1])]);
      case 1 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* C */2])]);
      case 2 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* D */3])]);
      case 3 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* E */4])]);
      case 4 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* H */6])]);
      case 5 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* L */7])]);
      case 6 : 
          return /* Rr */Block.__(26, [/* Pointer */Block.__(2, [/* HL */3])]);
      case 7 : 
          return /* Rr */Block.__(26, [/* Register */Block.__(0, [/* A */0])]);
      case 8 : 
          return /* Sla */Block.__(29, [/* B */1]);
      case 9 : 
          return /* Sla */Block.__(29, [/* C */2]);
      case 10 : 
          return /* Sla */Block.__(29, [/* D */3]);
      case 11 : 
          return /* Sla */Block.__(29, [/* E */4]);
      case 12 : 
          return /* Sla */Block.__(29, [/* H */6]);
      case 13 : 
          return /* Sla */Block.__(29, [/* L */7]);
      case 15 : 
          return /* Sla */Block.__(29, [/* A */0]);
      case 14 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 21 : 
      case 22 : 
      case 23 : 
          exit = 1;
          break;
      case 24 : 
          return /* Swap */Block.__(32, [/* B */1]);
      case 25 : 
          return /* Swap */Block.__(32, [/* C */2]);
      case 26 : 
          return /* Swap */Block.__(32, [/* D */3]);
      case 27 : 
          return /* Swap */Block.__(32, [/* E */4]);
      case 28 : 
          return /* Swap */Block.__(32, [/* H */6]);
      case 29 : 
          return /* Swap */Block.__(32, [/* L */7]);
      case 30 : 
          return /* Swap_hl */44;
      case 31 : 
          return /* Swap */Block.__(32, [/* A */0]);
      case 32 : 
          return /* Srl */Block.__(30, [/* B */1]);
      case 33 : 
          return /* Srl */Block.__(30, [/* C */2]);
      case 34 : 
          return /* Srl */Block.__(30, [/* D */3]);
      case 35 : 
          return /* Srl */Block.__(30, [/* E */4]);
      case 36 : 
          return /* Srl */Block.__(30, [/* H */6]);
      case 37 : 
          return /* Srl */Block.__(30, [/* L */7]);
      case 38 : 
          return /* Srl_hl */42;
      case 39 : 
          return /* Srl */Block.__(30, [/* A */0]);
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (opcode >= 64 && opcode <= 127) {
      var reg = Caml_array.caml_array_get(regs, opcode & 7);
      var bit = (opcode >>> 3) & 7;
      return /* Bit */Block.__(4, [
                bit,
                reg
              ]);
    } else if (opcode >= 128 && opcode <= 191) {
      var reg$1 = Caml_array.caml_array_get(regs, opcode & 7);
      var bit$1 = (opcode >>> 3) & 7;
      return /* Res */Block.__(23, [
                bit$1,
                reg$1
              ]);
    } else {
      throw [
            CBOpcodeNotImplemented,
            Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "0x",
                          /* Int */Block.__(4, [
                              /* Int_X */8,
                              /* Lit_padding */Block.__(0, [
                                  /* Zeros */2,
                                  2
                                ]),
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "0x%02X"
                    ]), opcode)
          ];
    }
  }
  
}

function pretty(instruction) {
  if (typeof instruction === "number") {
    switch (instruction) {
      case 0 : 
          return "ADC d8";
      case 1 : 
          return "ADD A, d8";
      case 2 : 
          return "ADD SP, r8";
      case 3 : 
          return "AND d8";
      case 4 : 
          return "NAD (HL)";
      case 5 : 
          return "CALL d16";
      case 6 : 
          return "CCF";
      case 7 : 
          return "CP n";
      case 8 : 
          return "CPL";
      case 9 : 
          return "DAA";
      case 10 : 
          return "DEC (HL)";
      case 11 : 
          return "DI";
      case 12 : 
          return "EI";
      case 13 : 
          return "HALT";
      case 14 : 
          return "INC (HL)";
      case 15 : 
          return "JP nn";
      case 16 : 
          return "JP (HL)";
      case 17 : 
          return "JR e8";
      case 18 : 
          return "LD sp, nn";
      case 19 : 
          return "LDH A, (FF00+n)";
      case 20 : 
          return "LDH (FF00+n), A";
      case 21 : 
          return "LD A, (FF00+C)";
      case 22 : 
          return "LD (FF00+C), A";
      case 23 : 
          return "LDD (HL), A";
      case 24 : 
          return "LDI A, (HL)";
      case 25 : 
          return "LDI (HL), A";
      case 26 : 
          return "LD (a16), A";
      case 27 : 
          return "LD (a16), SP";
      case 28 : 
          return "LD SP, HL";
      case 29 : 
          return "LD A,(a16)";
      case 30 : 
          return "LD n, (HL)";
      case 31 : 
          return "LD HL, sp+e8";
      case 32 : 
          return "OR d8";
      case 33 : 
          return "OR (HL)";
      case 34 : 
          return "NOP";
      case 35 : 
          return "POP AF";
      case 36 : 
          return "RET";
      case 37 : 
          return "RETI";
      case 38 : 
          return "RLCA";
      case 39 : 
          return "RRA";
      case 40 : 
          return "SBC A, d8";
      case 41 : 
          return "SCF";
      case 42 : 
          return "SRL (HL)";
      case 43 : 
          return "SUB d8";
      case 44 : 
          return "SWAP (HL)";
      case 45 : 
          return "XOR d8";
      case 46 : 
          return "XOR A, (HL)";
      
    }
  } else {
    switch (instruction.tag | 0) {
      case 0 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "ADC A, ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "ADC A, %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 1 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "ADD A, ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "ADD A, %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 2 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "ADD HL, ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "ADD HL, %s"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 3 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "AND ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "AND %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 4 : 
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "BIT ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ", ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "BIT %d, %s"
                        ]), instruction[0], Registers$Yobml.to_string(instruction[1]));
      case 5 : 
          var match = instruction[0];
          if (match !== 0) {
            if (match >= 3) {
              if (instruction[1]) {
                return "CALL C, d16";
              } else {
                return "CALL NC, d16";
              }
            } else {
              return "unreachable";
            }
          } else if (instruction[1]) {
            return "CALL Z, d16";
          } else {
            return "CALL NZ, d16";
          }
      case 6 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "CP ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "CP %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 7 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "DEC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "DEC %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 8 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "DEC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "DEC %s"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 9 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "INC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "INC %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 10 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "INC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "INC %s"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 11 : 
          var match$1 = instruction[0];
          if (match$1 !== 0) {
            if (match$1 >= 3) {
              if (instruction[1]) {
                return "JP C, a16";
              } else {
                return "JP NC, a16";
              }
            } else {
              return "JP unreachable";
            }
          } else if (instruction[1]) {
            return "JP Z, a16";
          } else {
            return "JP NZ, a16";
          }
      case 12 : 
          var match$2 = instruction[0];
          if (match$2 !== 0) {
            if (match$2 >= 3) {
              if (instruction[1]) {
                return "JR C, nn";
              } else {
                return "JR NC, nn";
              }
            } else {
              return "Unreachable";
            }
          } else if (instruction[1]) {
            return "JR Z, nn";
          } else {
            return "JR NZ, nn";
          }
      case 13 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD [",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "], A",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD [%s], A"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 14 : 
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "LD %s, %s"
                        ]), Registers$Yobml.to_string(instruction[0]), Registers$Yobml.to_string(instruction[1]));
      case 15 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD (HL), ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "LD (HL), %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 16 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", (HL)",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD %s, (HL)"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 17 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD A, [",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "]" */93,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD A, [%s]"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 18 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", n",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD %s, n"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 19 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", nn",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD %s, nn"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 20 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "OR ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "OR %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 21 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "POP ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "POP %s"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 22 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "PUSH ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "PUSH %s"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 23 : 
          return Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "RES ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ", ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "RES %d, %s"
                        ]), instruction[0], Registers$Yobml.to_string(instruction[1]));
      case 24 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "RES ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ", (HL)",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "RES %d, (HL)"
                        ]), instruction[0]);
      case 25 : 
          var match$3 = instruction[0];
          if (match$3 !== 0) {
            if (match$3 >= 3) {
              if (instruction[1]) {
                return "RET C";
              } else {
                return "RET NC";
              }
            } else {
              return "Unreachable RET";
            }
          } else if (instruction[1]) {
            return "RET Z";
          } else {
            return "RET NZ";
          }
      case 26 : 
          var match$4 = instruction[0];
          switch (match$4.tag | 0) {
            case 0 : 
                return Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "RR ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ])
                                  ]),
                                "RR %s"
                              ]), Registers$Yobml.to_string(match$4[0]));
            case 1 : 
                return Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "RR ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ])
                                  ]),
                                "RR %s"
                              ]), Registers$Yobml.to_string16(match$4[0]));
            case 2 : 
                return Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "RR (",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ]),
                                "RR (%s)"
                              ]), Registers$Yobml.to_string16(match$4[0]));
            
          }
      case 27 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "RST ",
                              /* Int */Block.__(4, [
                                  /* Int_X */8,
                                  /* Lit_padding */Block.__(0, [
                                      /* Zeros */2,
                                      2
                                    ]),
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "H" */72,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "RST %02XH"
                        ]), instruction[0]);
      case 28 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "SBC A,",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "SBC A,%s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 29 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "SLA ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "SLA %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 30 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "SRL ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "SRL %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 31 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "SUB ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "SUB %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 32 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "SWAP ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "SWAP %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 33 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "XOR ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "XOR %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      
    }
  }
}

exports.regs = regs;
exports.OpcodeNotImplemented = OpcodeNotImplemented;
exports.CBOpcodeNotImplemented = CBOpcodeNotImplemented;
exports.decode = decode;
exports.decode_cb = decode_cb;
exports.pretty = pretty;
/* No side effect */
