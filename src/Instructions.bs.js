// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Registers$Yobml = require("./Registers.bs.js");

var OpcodeNotImplement = Caml_exceptions.create("Instructions-Yobml.OpcodeNotImplement");

function decode(opcode) {
  var exit = 0;
  if (opcode >= 224) {
    if (opcode >= 243) {
      if (opcode !== 254) {
        if (opcode >= 244) {
          exit = 1;
        } else {
          return /* Di */1;
        }
      } else {
        return /* Cp_n */0;
      }
    } else if (opcode !== 240) {
      if (opcode >= 225) {
        exit = 1;
      } else {
        return /* Ld_write_io_n */4;
      }
    } else {
      return /* Ld_read_io_n */3;
    }
  } else if (opcode !== 175) {
    if (opcode >= 72) {
      if (opcode !== 195) {
        exit = 1;
      } else {
        return /* Jp */2;
      }
    } else if (opcode >= 0) {
      switch (opcode) {
        case 0 : 
            return /* Nop */8;
        case 1 : 
            return /* Ld_nn */Block.__(5, [/* BC */1]);
        case 5 : 
            return /* Dec */Block.__(0, [/* B */1]);
        case 6 : 
            return /* Ld_n */Block.__(4, [/* B */1]);
        case 12 : 
            return /* Inc */Block.__(2, [/* C */2]);
        case 13 : 
            return /* Dec */Block.__(0, [/* C */2]);
        case 14 : 
            return /* Ld_n */Block.__(4, [/* C */2]);
        case 17 : 
            return /* Ld_nn */Block.__(5, [/* DE */2]);
        case 32 : 
            return /* Jr */Block.__(3, [
                      /* Z */0,
                      false
                    ]);
        case 33 : 
            return /* Ld_nn */Block.__(5, [/* HL */3]);
        case 42 : 
            return /* Ldi_a_hl */6;
        case 50 : 
            return /* Ldd_hl_a */5;
        case 54 : 
            return /* Ld_n_hl */7;
        case 62 : 
            return /* Ld_n */Block.__(4, [/* A */0]);
        case 65 : 
            return /* Ld_rr */Block.__(1, [
                      /* B */1,
                      /* C */2
                    ]);
        case 66 : 
            return /* Ld_rr */Block.__(1, [
                      /* B */1,
                      /* D */3
                    ]);
        case 2 : 
        case 3 : 
        case 4 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 15 : 
        case 16 : 
        case 18 : 
        case 19 : 
        case 20 : 
        case 21 : 
        case 22 : 
        case 23 : 
        case 24 : 
        case 25 : 
        case 26 : 
        case 27 : 
        case 28 : 
        case 29 : 
        case 30 : 
        case 31 : 
        case 34 : 
        case 35 : 
        case 36 : 
        case 37 : 
        case 38 : 
        case 39 : 
        case 40 : 
        case 41 : 
        case 43 : 
        case 44 : 
        case 45 : 
        case 46 : 
        case 47 : 
        case 48 : 
        case 49 : 
        case 51 : 
        case 52 : 
        case 53 : 
        case 55 : 
        case 56 : 
        case 57 : 
        case 58 : 
        case 59 : 
        case 60 : 
        case 61 : 
        case 63 : 
        case 64 : 
        case 67 : 
        case 68 : 
        case 69 : 
        case 70 : 
            exit = 1;
            break;
        case 71 : 
            return /* Ld_rr */Block.__(1, [
                      /* B */1,
                      /* A */0
                    ]);
        
      }
    } else {
      exit = 1;
    }
  } else {
    return /* Xor */Block.__(6, [
              /* A */0,
              /* A */0
            ]);
  }
  if (exit === 1) {
    throw [
          OpcodeNotImplement,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "0x",
                        /* Int */Block.__(4, [
                            /* Int_X */8,
                            /* Lit_padding */Block.__(0, [
                                /* Zeros */2,
                                2
                              ]),
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "0x%02X"
                  ]), opcode)
        ];
  }
  
}

function pretty(instruction) {
  if (typeof instruction === "number") {
    switch (instruction) {
      case 0 : 
          return "CP n";
      case 1 : 
          return "Di";
      case 2 : 
          return "JP nn";
      case 3 : 
          return "LDH A, (FF00+n)";
      case 4 : 
          return "LDH (FF00+n), A";
      case 5 : 
          return "LDD (HL), A";
      case 6 : 
          return "LDI A, (HL)";
      case 7 : 
          return "LD n, (HL)";
      case 8 : 
          return "NOP";
      
    }
  } else {
    switch (instruction.tag | 0) {
      case 0 : 
          return Curry._1(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "DEC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "DEC %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 1 : 
          return Curry._2(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "LD %s, %s"
                        ]), Registers$Yobml.to_string(instruction[0]), Registers$Yobml.to_string(instruction[1]));
      case 2 : 
          return Curry._1(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "INC ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "INC %s"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 3 : 
          var match = instruction[0];
          if (match !== 0) {
            if (match >= 3) {
              if (instruction[1]) {
                return "JR C, nn";
              } else {
                return "JR NC, nn";
              }
            } else {
              return "Unreachable";
            }
          } else if (instruction[1]) {
            return "JR Z, nn";
          } else {
            return "JR NZ, nn";
          }
      case 4 : 
          return Curry._1(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", n",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD %s, n"
                        ]), Registers$Yobml.to_string(instruction[0]));
      case 5 : 
          return Curry._1(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "LD ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", nn",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "LD %s, nn"
                        ]), Registers$Yobml.to_string16(instruction[0]));
      case 6 : 
          return Curry._2(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "XOR ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "XOR %s %s"
                        ]), Registers$Yobml.to_string(instruction[0]), Registers$Yobml.to_string(instruction[1]));
      
    }
  }
}

exports.OpcodeNotImplement = OpcodeNotImplement;
exports.decode = decode;
exports.pretty = pretty;
/* Format Not a pure module */
