// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Cpu$Yobml = require("./Cpu.bs.js");
var Memory$Yobml = require("./Memory.bs.js");
var Instructions$Yobml = require("./Instructions.bs.js");
var InstructionsExec$Yobml = require("./InstructionsExec.bs.js");

function pretty_flags(cpu) {
  return $$Array.map((function (flag) {
                  var match = Cpu$Yobml.has_flag(cpu, flag);
                  if (match) {
                    return Cpu$Yobml.flag_to_string(flag);
                  } else {
                    return "-";
                  }
                }), /* array */[
                /* C */3,
                /* H */2,
                /* N */1,
                /* Z */0
              ]).join("");
}

function trace(cpu, instruction) {
  console.log(Curry.app(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "AF:",
                    /* Int */Block.__(4, [
                        /* Int_X */8,
                        /* Lit_padding */Block.__(0, [
                            /* Zeros */2,
                            4
                          ]),
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            " BC:",
                            /* Int */Block.__(4, [
                                /* Int_X */8,
                                /* Lit_padding */Block.__(0, [
                                    /* Zeros */2,
                                    4
                                  ]),
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " DE:",
                                    /* Int */Block.__(4, [
                                        /* Int_X */8,
                                        /* Lit_padding */Block.__(0, [
                                            /* Zeros */2,
                                            4
                                          ]),
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " HL:",
                                            /* Int */Block.__(4, [
                                                /* Int_X */8,
                                                /* Lit_padding */Block.__(0, [
                                                    /* Zeros */2,
                                                    4
                                                  ]),
                                                /* No_precision */0,
                                                /* String_literal */Block.__(11, [
                                                    " SP:",
                                                    /* Int */Block.__(4, [
                                                        /* Int_X */8,
                                                        /* Lit_padding */Block.__(0, [
                                                            /* Zeros */2,
                                                            4
                                                          ]),
                                                        /* No_precision */0,
                                                        /* String_literal */Block.__(11, [
                                                            " [",
                                                            /* String */Block.__(2, [
                                                                /* No_padding */0,
                                                                /* String_literal */Block.__(11, [
                                                                    "] ",
                                                                    /* Int */Block.__(4, [
                                                                        /* Int_X */8,
                                                                        /* Lit_padding */Block.__(0, [
                                                                            /* Zeros */2,
                                                                            4
                                                                          ]),
                                                                        /* No_precision */0,
                                                                        /* String_literal */Block.__(11, [
                                                                            ": ",
                                                                            /* Int */Block.__(4, [
                                                                                /* Int_X */8,
                                                                                /* Lit_padding */Block.__(0, [
                                                                                    /* Zeros */2,
                                                                                    2
                                                                                  ]),
                                                                                /* No_precision */0,
                                                                                /* Char_literal */Block.__(12, [
                                                                                    /* " " */32,
                                                                                    /* Int */Block.__(4, [
                                                                                        /* Int_X */8,
                                                                                        /* Lit_padding */Block.__(0, [
                                                                                            /* Zeros */2,
                                                                                            2
                                                                                          ]),
                                                                                        /* No_precision */0,
                                                                                        /* Char_literal */Block.__(12, [
                                                                                            /* " " */32,
                                                                                            /* Int */Block.__(4, [
                                                                                                /* Int_X */8,
                                                                                                /* Lit_padding */Block.__(0, [
                                                                                                    /* Zeros */2,
                                                                                                    2
                                                                                                  ]),
                                                                                                /* No_precision */0,
                                                                                                /* String_literal */Block.__(11, [
                                                                                                    "  ",
                                                                                                    /* String */Block.__(2, [
                                                                                                        /* No_padding */0,
                                                                                                        /* End_of_format */0
                                                                                                      ])
                                                                                                  ])
                                                                                              ])
                                                                                          ])
                                                                                      ])
                                                                                  ])
                                                                              ])
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "AF:%04X BC:%04X DE:%04X HL:%04X SP:%04X [%s] %04X: %02X %02X %02X  %s"
              ]), [
            Cpu$Yobml.get_register16(cpu, /* AF */0),
            Cpu$Yobml.get_register16(cpu, /* BC */1),
            Cpu$Yobml.get_register16(cpu, /* DE */2),
            Cpu$Yobml.get_register16(cpu, /* HL */3),
            cpu[/* sp */0],
            pretty_flags(cpu),
            cpu[/* pc */1],
            Memory$Yobml.load(cpu[/* memory */5], cpu[/* pc */1]),
            Memory$Yobml.load(cpu[/* memory */5], cpu[/* pc */1] + 1 | 0),
            Memory$Yobml.load(cpu[/* memory */5], cpu[/* pc */1] + 2 | 0),
            Instructions$Yobml.pretty(instruction)
          ]));
  return /* () */0;
}

function step(cpu) {
  var opcode = Memory$Yobml.load(cpu[/* memory */5], cpu[/* pc */1]);
  var match;
  if (opcode !== 203) {
    var instruction = Instructions$Yobml.decode(opcode);
    trace(cpu, instruction);
    match = /* tuple */[
      /* record */[
        /* sp */cpu[/* sp */0],
        /* pc */cpu[/* pc */1] + 1 | 0,
        /* cycle */cpu[/* cycle */2],
        /* ime */cpu[/* ime */3],
        /* registers */cpu[/* registers */4],
        /* memory */cpu[/* memory */5],
        /* serial */cpu[/* serial */6]
      ],
      instruction
    ];
  } else {
    var $$byte = Memory$Yobml.load(cpu[/* memory */5], cpu[/* pc */1] + 1 | 0);
    var instruction$1 = Instructions$Yobml.decode_cb($$byte);
    trace(cpu, instruction$1);
    match = /* tuple */[
      /* record */[
        /* sp */cpu[/* sp */0],
        /* pc */cpu[/* pc */1] + 2 | 0,
        /* cycle */cpu[/* cycle */2],
        /* ime */cpu[/* ime */3],
        /* registers */cpu[/* registers */4],
        /* memory */cpu[/* memory */5],
        /* serial */cpu[/* serial */6]
      ],
      instruction$1
    ];
  }
  var instruction$2 = match[1];
  return /* tuple */[
          InstructionsExec$Yobml.execute(match[0], instruction$2),
          instruction$2
        ];
}

exports.pretty_flags = pretty_flags;
exports.trace = trace;
exports.step = step;
/* No side effect */
