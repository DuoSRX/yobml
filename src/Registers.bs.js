// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';


function tToJs(param) {
  return {
          a: param[/* a */0],
          b: param[/* b */1],
          c: param[/* c */2],
          d: param[/* d */3],
          e: param[/* e */4],
          f: param[/* f */5],
          h: param[/* h */6],
          l: param[/* l */7],
          sp: param[/* sp */8]
        };
}

function tFromJs(param) {
  return /* record */[
          /* a */param.a,
          /* b */param.b,
          /* c */param.c,
          /* d */param.d,
          /* e */param.e,
          /* f */param.f,
          /* h */param.h,
          /* l */param.l,
          /* sp */param.sp
        ];
}

function make(param) {
  return /* record */[
          /* a */1,
          /* b */0,
          /* c */19,
          /* d */0,
          /* e */216,
          /* f */176,
          /* h */1,
          /* l */77,
          /* sp */65534
        ];
}

function get(regs, reg) {
  switch (reg) {
    case 0 : 
        return regs[/* a */0];
    case 1 : 
        return regs[/* b */1];
    case 2 : 
        return regs[/* c */2];
    case 3 : 
        return regs[/* d */3];
    case 4 : 
        return regs[/* e */4];
    case 5 : 
        return regs[/* f */5];
    case 6 : 
        return regs[/* h */6];
    case 7 : 
        return regs[/* l */7];
    
  }
}

function set(regs, reg, value) {
  switch (reg) {
    case 0 : 
        regs[/* a */0] = value;
        return /* () */0;
    case 1 : 
        regs[/* b */1] = value;
        return /* () */0;
    case 2 : 
        regs[/* c */2] = value;
        return /* () */0;
    case 3 : 
        regs[/* d */3] = value;
        return /* () */0;
    case 4 : 
        regs[/* e */4] = value;
        return /* () */0;
    case 5 : 
        regs[/* f */5] = value;
        return /* () */0;
    case 6 : 
        regs[/* h */6] = value;
        return /* () */0;
    case 7 : 
        regs[/* l */7] = value;
        return /* () */0;
    
  }
}

function get16(regs, reg) {
  switch (reg) {
    case 0 : 
        return (regs[/* a */0] << 8) | regs[/* f */5];
    case 1 : 
        return (regs[/* b */1] << 8) | regs[/* c */2];
    case 2 : 
        return (regs[/* d */3] << 8) | regs[/* e */4];
    case 3 : 
        return (regs[/* h */6] << 8) | regs[/* l */7];
    case 4 : 
        return regs[/* sp */8];
    
  }
}

function set16(regs, reg, value) {
  var hi = (value >>> 8);
  var lo = value & 255;
  switch (reg) {
    case 0 : 
        regs[/* a */0] = hi;
        regs[/* f */5] = lo;
        return /* () */0;
    case 1 : 
        regs[/* b */1] = hi;
        regs[/* c */2] = lo;
        return /* () */0;
    case 2 : 
        regs[/* d */3] = hi;
        regs[/* e */4] = lo;
        return /* () */0;
    case 3 : 
        regs[/* h */6] = hi;
        regs[/* l */7] = lo;
        return /* () */0;
    case 4 : 
        regs[/* sp */8] = value;
        return /* () */0;
    
  }
}

function to_string(reg) {
  switch (reg) {
    case 0 : 
        return "A";
    case 1 : 
        return "B";
    case 2 : 
        return "C";
    case 3 : 
        return "D";
    case 4 : 
        return "E";
    case 5 : 
        return "F";
    case 6 : 
        return "H";
    case 7 : 
        return "L";
    
  }
}

function to_string16(reg) {
  switch (reg) {
    case 0 : 
        return "AF";
    case 1 : 
        return "BC";
    case 2 : 
        return "DE";
    case 3 : 
        return "HL";
    case 4 : 
        return "SP";
    
  }
}

exports.tToJs = tToJs;
exports.tFromJs = tFromJs;
exports.make = make;
exports.get = get;
exports.set = set;
exports.get16 = get16;
exports.set16 = set16;
exports.to_string = to_string;
exports.to_string16 = to_string16;
/* No side effect */
