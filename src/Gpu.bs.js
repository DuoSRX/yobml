// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Memory$Yobml = require("./Memory.bs.js");

function make(param) {
  return /* record */[
          /* mode : HBlank */1,
          /* lcd */128,
          /* control */0,
          /* ly */0,
          /* cycles */0,
          /* frame */$$Array.make_matrix(144, 160, 0)
        ];
}

function render_background(gpu, memory) {
  var ly = gpu[/* ly */3];
  var y = ((0 + ly | 0) / 8 | 0) % 32;
  var y_offset = (0 + ly | 0) % 8;
  for(var px = 0; px <= 159; ++px){
    var x = ((0 + px | 0) / 8 | 0) % 32 & 65535;
    var tile = Memory$Yobml.load(memory, (38912 + (y << 5) | 0) + x & 65535);
    var ptr = 36864 + (tile << 4) & 65535;
    var ptr$1 = ptr + ((y_offset << 1) & 65535) | 0;
    var p0 = Memory$Yobml.load(memory, ptr$1);
    var p1 = Memory$Yobml.load(memory, ptr$1 + 1 | 0);
    var colb = -((px + 0 | 0) % 8 - 7 | 0) | 0;
    var match = ((p1 >>> colb) & 1) === 1;
    var coln = match ? 1 : 0;
    var match$1 = ((p0 >>> colb) & 1) === 1;
    var coln$1 = (coln << 1) | (
      match$1 ? 1 : 0
    );
    var color = coln$1 > 3 || coln$1 < 0 ? Pervasives.failwith("impossiburu") : coln$1;
    Caml_array.caml_array_set(Caml_array.caml_array_get(gpu[/* frame */5], ly), px, color);
  }
  return /* () */0;
}

function set_mode(gpu, mode) {
  var cleared = gpu[/* lcd */1] & 252;
  switch (mode) {
    case 0 : 
        return /* record */[
                /* mode : VBlank */0,
                /* lcd */cleared + 1 | 0,
                /* control */gpu[/* control */2],
                /* ly */gpu[/* ly */3],
                /* cycles */gpu[/* cycles */4],
                /* frame */gpu[/* frame */5]
              ];
    case 1 : 
        return /* record */[
                /* mode : HBlank */1,
                /* lcd */cleared,
                /* control */gpu[/* control */2],
                /* ly */gpu[/* ly */3],
                /* cycles */gpu[/* cycles */4],
                /* frame */gpu[/* frame */5]
              ];
    case 2 : 
        return /* record */[
                /* mode : OamRead */2,
                /* lcd */cleared + 2 | 0,
                /* control */gpu[/* control */2],
                /* ly */gpu[/* ly */3],
                /* cycles */gpu[/* cycles */4],
                /* frame */gpu[/* frame */5]
              ];
    case 3 : 
        return /* record */[
                /* mode : LcdTransfer */3,
                /* lcd */cleared + 3 | 0,
                /* control */gpu[/* control */2],
                /* ly */gpu[/* ly */3],
                /* cycles */gpu[/* cycles */4],
                /* frame */gpu[/* frame */5]
              ];
    
  }
}

function step(gpu, memory, cycles) {
  var cycles$1 = gpu[/* cycles */4] + cycles | 0;
  var match = gpu[/* mode */0];
  var exit = 0;
  switch (match) {
    case 0 : 
        if (cycles$1 >= 456) {
          var cycles$2 = cycles$1 - 456 | 0;
          var ly = gpu[/* ly */3] + 1 | 0;
          if (ly === 154) {
            return set_mode(/* record */[
                        /* mode */gpu[/* mode */0],
                        /* lcd */gpu[/* lcd */1],
                        /* control */gpu[/* control */2],
                        /* ly */0,
                        /* cycles */cycles$2,
                        /* frame */gpu[/* frame */5]
                      ], /* OamRead */2);
          } else {
            return /* record */[
                    /* mode */gpu[/* mode */0],
                    /* lcd */gpu[/* lcd */1],
                    /* control */gpu[/* control */2],
                    /* ly */ly,
                    /* cycles */cycles$2,
                    /* frame */gpu[/* frame */5]
                  ];
          }
        } else {
          exit = 1;
        }
        break;
    case 1 : 
        if (cycles$1 >= 204) {
          var cycles$3 = cycles$1 - 204 | 0;
          var ly$1 = gpu[/* ly */3] + 1 | 0;
          if (ly$1 === 144) {
            return set_mode(/* record */[
                        /* mode */gpu[/* mode */0],
                        /* lcd */gpu[/* lcd */1],
                        /* control */gpu[/* control */2],
                        /* ly */ly$1,
                        /* cycles */cycles$3,
                        /* frame */gpu[/* frame */5]
                      ], /* VBlank */0);
          } else {
            return set_mode(/* record */[
                        /* mode */gpu[/* mode */0],
                        /* lcd */gpu[/* lcd */1],
                        /* control */gpu[/* control */2],
                        /* ly */ly$1,
                        /* cycles */cycles$3,
                        /* frame */gpu[/* frame */5]
                      ], /* OamRead */2);
          }
        } else {
          exit = 1;
        }
        break;
    case 2 : 
        if (cycles$1 >= 80) {
          var cycles$4 = cycles$1 - 80 | 0;
          return set_mode(/* record */[
                      /* mode */gpu[/* mode */0],
                      /* lcd */gpu[/* lcd */1],
                      /* control */gpu[/* control */2],
                      /* ly */gpu[/* ly */3],
                      /* cycles */cycles$4,
                      /* frame */gpu[/* frame */5]
                    ], /* LcdTransfer */3);
        } else {
          exit = 1;
        }
        break;
    case 3 : 
        if (cycles$1 >= 172) {
          var cycles$5 = cycles$1 - 172 | 0;
          render_background(gpu, memory);
          return set_mode(/* record */[
                      /* mode */gpu[/* mode */0],
                      /* lcd */gpu[/* lcd */1],
                      /* control */gpu[/* control */2],
                      /* ly */gpu[/* ly */3],
                      /* cycles */cycles$5,
                      /* frame */gpu[/* frame */5]
                    ], /* HBlank */1);
        } else {
          exit = 1;
        }
        break;
    
  }
  if (exit === 1) {
    return /* record */[
            /* mode */gpu[/* mode */0],
            /* lcd */gpu[/* lcd */1],
            /* control */gpu[/* control */2],
            /* ly */gpu[/* ly */3],
            /* cycles */cycles$1,
            /* frame */gpu[/* frame */5]
          ];
  }
  
}

exports.make = make;
exports.render_background = render_background;
exports.set_mode = set_mode;
exports.step = step;
/* No side effect */
