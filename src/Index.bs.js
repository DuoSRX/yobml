// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Memory$Yobml = require("./Memory.bs.js");
var Console$Yobml = require("./Console.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var fetch_rom = (
  async function logFetch(url) {
    const response = await fetch(url);
    const buffer = await response.arrayBuffer();
    return new Uint8Array(buffer)
  }
  );

var display = ( document.getElementById("display") );

var ctx = display.getContext("2d");

var display$1 = (
    function display(ctx, pixels) {
      var imageData = new ImageData(new Uint8ClampedArray(pixels), 160, 144)
      ctx.putImageData(imageData, 0, 0);
    }
  );

var steps = /* record */[/* contents */0];

var ConsoleFailure = Caml_exceptions.create("Index-Yobml.ConsoleFailure");

function step($$console$1) {
  var $$console$2 = /* record */[/* contents */$$console$1];
  while(!$$console$2[0][/* gpu */1][/* new_frame */9]) {
    var tmp;
    try {
      tmp = Console$Yobml.step($$console$2[0]);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Memory$Yobml.InvalidMemoryAccess) {
        var msg = Curry._2(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Console crash at ",
                      /* Int */Block.__(4, [
                          /* Int_X */8,
                          /* Lit_padding */Block.__(0, [
                              /* Zeros */2,
                              4
                            ]),
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              ". Reason: ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ]),
                  "Console crash at %04X. Reason: %s"
                ]), $$console$2[0][/* cpu */0][/* pc */0], exn[1]);
        throw [
              ConsoleFailure,
              msg
            ];
      } else {
        throw exn;
      }
    }
    $$console$2[0] = tmp;
  };
  Curry._2(display$1, ctx, $$console$2[0][/* gpu */1][/* frame */5]);
  $$console$2[0][/* gpu */1][/* new_frame */9] = false;
  steps[0] = steps[0] + 1 | 0;
  if (steps[0] < 2000) {
    setTimeout((function (param) {
            return step($$console$2[0]);
          }), 1);
    return /* () */0;
  } else {
    console.log("Done");
    return /* () */0;
  }
}

Curry._1(fetch_rom, "http://localhost:8000/roms/tetris.gb").then((function (rom) {
        var $$console = Console$Yobml.make(rom);
        step($$console);
        return Promise.resolve(/* () */0);
      }));

exports.fetch_rom = fetch_rom;
exports.ctx = ctx;
exports.display = display$1;
exports.steps = steps;
exports.ConsoleFailure = ConsoleFailure;
exports.step = step;
/* fetch_rom Not a pure module */
